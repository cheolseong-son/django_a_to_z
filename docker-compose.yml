
# 도커 컴포즈 파일을 사용하면 컨테이너 여러 개를 한 번에 실행시킬 수 있고, 컨테이너를 실행시킬 때 옵션을 줄 수 있다.

# 도커 컴포즈 파일 포맷을 최신으로 사용 '3'
version: '3'

services:
  nginx: # nginx라는 이름의 컨테이너 추가
    build: ./nginx
    volumes: # nginx 컨테이너를 만듹 위한 파일을 넣을 nginx폴더를 만든다.
      - static_volume:/usr/app/_static
      - media_volume:/usr/app/_media
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443 # nginx 웹 서버가 SSL롤 통신하기 위한 443포트를 추가
    depends_on:
      - web
  certbot:  # 새로운 컨테이너를 certbot이라는 이름으로 생성
    image: certbot/certbot  # 도커에서 제공하는 certbot 이미지를 가져와서 사용한다.
    # 리눅스 명령어이다. 12시간마다  certbot을 실행하여 인증서를 갱신,
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!};done'"
    volumes: # certbot 컨테이너와 nginx 컨테이너가 인증 관련 파일을 공유하도록 volume 설정을 양쪽에 모두 한다.
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot


  # web이라는 이름의 서비스 하나만 실행
  web:
    # Dockerfile을 을 실행해 컨테이너 이미지를 만든다.
    build: .
    # 서버 실행
#    command: python manage.py runserver 0.0.0.0:8000
    command: gunicorn do_it_django_prj.wsgi:application --bind 0.0.0.0:8000

    # 로컬 컴푸터의 폴더와 도커의 폴더를 연결
    volumes:
      - static_volume:/usr/app/_static
      - media_volume:/usr/app/_media
      - ./:/usr/app/
    expose: #
      - 8000
    # 오류를 보이지 않게 settings.py를 수정, env.dev와 env.prod로 나눠 개발용 파일과 배표용 파일
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db

volumes:
  postgres_data:
  static_volume: # 컨테이너를 다시 실했을 때 바로 불러올 수 있다.
  media_volume:



